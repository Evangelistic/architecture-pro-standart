@startuml Bank Platform - Container Diagram

!include ../includes/C4_Container.puml

LAYOUT_WITH_LEGEND()

title System Container Diagram for Banking Platform (ACL Model) - ОБНОВЛЕННАЯ

' ===================================
'           Actors & External Systems
' ===================================

Person(client, "Клиент Банка", "Использует банковские сервисы через веб-браузер и мобильное приложение.")

System_Ext(old_internet_bank, "Старый интернет-банк", "Унаследованная система на ASP.NET MVC 4.5. Доступна по прямой ссылке для старых функций.")
System_Ext(old_site, "Сайт", "Собственная разработка на PHP и React.js. Показывает маркетинговую информацию.")

' --- Раскрываем CRM платформу, чтобы показать внутренний микросервис ---
System_Boundary(crm_platform, "Платформа CRM") {
    Container(lead_processor, "Микросервис обработки заявок", "Java", "Получает данные о новых заявках из Kafka, обрабатывает их и отправляет результат обратно для дальнейшей обработки внутри банка.")
    Container_Ext(bank_call_center, "Система кол-центра", "Веб-интерфейс на React.js, бэкенд на Java Spring Boot. Позволяет работать с заявками от клиентов.")

    Rel(lead_processor, bank_call_center, "Регистрирует новые заявки и забирает информацию об закрытых", "HTTPS")
}
Container_Ext(partner_bank_call_center, "Система партнерского кол-центра", "Внешняя система. Позволяет работать с заявками от клиентов.")
Rel(lead_processor, partner_bank_call_center, "Регистрирует новые заявки и забирает информацию об закрытых", "REST/HTTPS")

' ===================================
'           System Boundary: Цифровой банк
' ===================================

System_Boundary(digital_bank, "Цифровой банк, необанк") {

    ' --- Клиентские приложения ---
    System_Boundary(user_ui, "Новое приложение интернет-банка") {
        Container(spa, "Single-Page App (Новый ИБ)", "React.js", "Предоставляет весь новый функционал интернет-банка через браузер.")
        Container(bff, "Backend For Frontend", "Java, Spring Boot", "Агрегирует данные для клиентских приложений.")
    }

    System_Boundary(bank_platform, "Новая платформа банка") {
    ' --- Точка входа ---
        Container(api_gateway, "API Gateway", "Kong/NGINX", "Обрабатывает все входящие запросы и направляет их в соответствующий сервис или ACL.")

        ' --- Шина данных ---
        ContainerQueue(kafka, "Kafka", "Apache Kafka", "Шина сообщений для асинхронного взаимодействия и горизонтального масштабирования.")

        ' --- Новая микросервисная архитектура ---
        System_Boundary(microservices, "Микросервисы") {
            Container(ticket_service, "Микросервис обработки обращений", "Java, Spring Boot", "Управляет жизненным циклом обращений клиентов.")
            ContainerDb(ticket_db, "БД Обращений", "PostgreSQL", "Хранит данные по обращениям клиентов.")
            Rel_D(ticket_service, ticket_db, "Читает/пишет", "JDBC")

            Container(deposit_service, "Микросервис Открытие депозитов онлайн", "Java, Spring Boot", "Обрабатывает заявки и открывает депозиты для клиентов.")
            ContainerDb(deposit_db, "БД Депозитов", "PostgreSQL", "Хранит данные по новым онлайн-депозитам.")
            Rel_D(deposit_service, deposit_db, "Читает/пишет", "JDBC")
        }

        ' --- Мост к унаследованной системе ---
        Container(anti_corruption_layer, "Anti-Corruption Layer (Фасад АБС)", "Java, Spring Boot", "Изолирует новые микросервисы от унаследованного монолита АБС. Транслирует запросы в вызовы PL/SQL.")
    }
    ' --- Унаследованная система ---
    System_Boundary(legacy_system, "Legacy System (АБС)") {
        Container_Ext(monolith_core, "Ядро монолита АБС", "Логика на PL/SQL и интерфейс на Delphi", "Унаследованная бизнес-логика, реализованная в виде хранимых процедур.")
        ContainerDb_Ext(monolith_db, "База данных АБС", "Oracle DB", "Единственный источник правды для унаследованных финансовых данных.")
        Rel(monolith_core, monolith_db, "Использует", "SQL")
    }

    ' ===================================
    '           Relationships
    ' ===================================

    ' --- Клиент -> Шлюз ---
    Rel_U(client, spa, "Использует", "HTTPS")
    Rel(spa, bff, "API-запросы", "JSON/HTTPS")
    Rel(bff, api_gateway, "API-запросы", "JSON/HTTPS")
    
    ' --- Шлюз -> Сервисы (Синхронные запросы) ---
    Rel(api_gateway, ticket_service, "Маршрутизирует запросы к обращениям", "REST/HTTPS")
    Rel(api_gateway, deposit_service, "Маршрутизирует запросы на открытие депозитов", "REST/HTTPS")
    Rel(api_gateway, anti_corruption_layer, "Маршрутизирует запросы к унаследованным функциям АБС", "REST/HTTPS")

    ' --- Взаимодействие с Legacy через ACL ---
    Rel(deposit_service, anti_corruption_layer, "Получает/обновляет данные счетов через", "REST/HTTPS")
    Rel(ticket_service, anti_corruption_layer, "Получает данные клиента через", "REST/HTTPS")
    Rel(anti_corruption_layer, monolith_db, "Вызывает хранимые процедуры", "SQL")
    
    ' --- Взаимодействие через Kafka (Асинхронные события) ---
    Rel(api_gateway, kafka, "Публикует события", "Kafka")
    Rel(ticket_service, kafka, "Публикует/подписывается на события", "Kafka")
    Rel(deposit_service, kafka, "Публикует/подписывается на события", "Kafka")
    
    ' --- Взаимодействие с внешними системами ---
    Rel(lead_processor, kafka, "Подписывается на новые заявки и публикует обработанные", "Kafka")
}

' ===================================
'           СВЯЗИ СО СТАРЫМИ СИСТЕМАМИ
' ===================================

' 1. Новое приложение (через BFF и Gateway) может обращаться к старому ИБ и сайту для плавного перехода
Rel(api_gateway, old_internet_bank, "Проксирует запросы на старые функции", "HTTPS")
Rel(api_gateway, old_site, "Проксирует запросы на старые функции", "HTTPS")

' 2. Старый интернет-банк работает напрямую с базой данных АБС
Rel(old_internet_bank, monolith_db, "Читает/пишет напрямую", "SQL")

@enduml
